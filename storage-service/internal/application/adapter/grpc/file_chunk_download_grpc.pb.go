// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: internal/application/adapter/grpc/file_chunk_download.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FileChunkDownloadService_DownloadChunk_FullMethodName = "/proto.FileChunkDownloadService/DownloadChunk"
)

// FileChunkDownloadServiceClient is the client API for FileChunkDownloadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileChunkDownloadServiceClient interface {
	DownloadChunk(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FileChunkDownloadRequest, FileChunkDownloadResponse], error)
}

type fileChunkDownloadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileChunkDownloadServiceClient(cc grpc.ClientConnInterface) FileChunkDownloadServiceClient {
	return &fileChunkDownloadServiceClient{cc}
}

func (c *fileChunkDownloadServiceClient) DownloadChunk(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FileChunkDownloadRequest, FileChunkDownloadResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileChunkDownloadService_ServiceDesc.Streams[0], FileChunkDownloadService_DownloadChunk_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FileChunkDownloadRequest, FileChunkDownloadResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileChunkDownloadService_DownloadChunkClient = grpc.ClientStreamingClient[FileChunkDownloadRequest, FileChunkDownloadResponse]

// FileChunkDownloadServiceServer is the server API for FileChunkDownloadService service.
// All implementations must embed UnimplementedFileChunkDownloadServiceServer
// for forward compatibility.
type FileChunkDownloadServiceServer interface {
	DownloadChunk(grpc.ClientStreamingServer[FileChunkDownloadRequest, FileChunkDownloadResponse]) error
	mustEmbedUnimplementedFileChunkDownloadServiceServer()
}

// UnimplementedFileChunkDownloadServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFileChunkDownloadServiceServer struct{}

func (UnimplementedFileChunkDownloadServiceServer) DownloadChunk(grpc.ClientStreamingServer[FileChunkDownloadRequest, FileChunkDownloadResponse]) error {
	return status.Errorf(codes.Unimplemented, "method DownloadChunk not implemented")
}
func (UnimplementedFileChunkDownloadServiceServer) mustEmbedUnimplementedFileChunkDownloadServiceServer() {
}
func (UnimplementedFileChunkDownloadServiceServer) testEmbeddedByValue() {}

// UnsafeFileChunkDownloadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileChunkDownloadServiceServer will
// result in compilation errors.
type UnsafeFileChunkDownloadServiceServer interface {
	mustEmbedUnimplementedFileChunkDownloadServiceServer()
}

func RegisterFileChunkDownloadServiceServer(s grpc.ServiceRegistrar, srv FileChunkDownloadServiceServer) {
	// If the following call pancis, it indicates UnimplementedFileChunkDownloadServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FileChunkDownloadService_ServiceDesc, srv)
}

func _FileChunkDownloadService_DownloadChunk_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileChunkDownloadServiceServer).DownloadChunk(&grpc.GenericServerStream[FileChunkDownloadRequest, FileChunkDownloadResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileChunkDownloadService_DownloadChunkServer = grpc.ClientStreamingServer[FileChunkDownloadRequest, FileChunkDownloadResponse]

// FileChunkDownloadService_ServiceDesc is the grpc.ServiceDesc for FileChunkDownloadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileChunkDownloadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.FileChunkDownloadService",
	HandlerType: (*FileChunkDownloadServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DownloadChunk",
			Handler:       _FileChunkDownloadService_DownloadChunk_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "internal/application/adapter/grpc/file_chunk_download.proto",
}
