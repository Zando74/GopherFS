version: "3.8"

services:
  control-plane-1:
    build:
      context: ../../control-plane
      dockerfile: app.Dockerfile
    ports:
      - "50050:50050"
    environment:
      - LEADER=true
      - NODE_ID=control-plane-1
      - CANDIDATES=control-plane-2,control-plane-3
    depends_on:
      - kafka

  control-plane-2:
    build:
      context: ../../control-plane
      dockerfile: app.Dockerfile
    ports:
      - "50051:50050"
    environment:
      - LEADER=false
      - NODE_ID=control-plane-2
      - CANDIDATES=control-plane-1,control-plane-3
    depends_on:
      - kafka

  control-plane-3:
    build:
      context: ../../control-plane
      dockerfile: app.Dockerfile
    ports:
      - "50052:50050"
    environment:
      - LEADER=false
      - NODE_ID=control-plane-3
      - CANDIDATES=control-plane-1,control-plane-2
    depends_on:
      - kafka

  storage-service:
    build:
      context: ../../storage-service
      dockerfile: app.Dockerfile
    depends_on:
      - kafka

  metadata-service:
    build:
      context: ../../metadata-service
      dockerfile: app.Dockerfile
    depends_on:
      - kafka

  replication-service:
    build:
      context: ../../replication-service
      dockerfile: app.Dockerfile
    depends_on:
      - kafka

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181

  kafka:
    image: bitnami/kafka:latest
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=3
      - KAFKA_MESSAGE_MAX_BYTES=100000000
      - KAFKA_REPLICA_FETCH_MAX_BYTES=100000000
      - KAFKA_MAX_REQUEST_SIZE=100000000
      - PARTITIONS=10
    depends_on:
      - zookeeper

